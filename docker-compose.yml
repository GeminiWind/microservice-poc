version: '3.1'

services:
  api-gateway:
    container_name: api-gateway
    image: nginx:latest
    volumes: 
      - ./api-gateway/nginx.conf:/etc/nginx/nginx.conf
    ports:
      - "80:80"
    networks:
      - microservice
    depends_on: 
      - auth-service
      - order-service
  # SERVICES
  registry-service:
    container_name: registry-service
    build:
      context: ./registry-service
    volumes: 
      - ./registry-service/services.json:/usr/app/services.json
    networks:
      - microservice
  storage-service:
    container_name: storage-service
    build:
      context: ./storage-service
    environment: 
      DB_HOST: database
      DB_PORT: 27017
      DB_NAME: ${DB_NAME:-database}
      DB_MAIN_TABLE: ${DB_MAIN_TABLE:-main}
      WAIT_HOSTS: database:27017, registry-service:3000
      # DB_ROOT_USERNAME: admin
      # DB_ROOT_PASSWORD: admin
    depends_on:
      - database
    networks:
      - microservice
  auth-service:
    container_name: auth-service
    build:
      context: ./auth-service
    environment: 
      SECRET_KEY: ${SECRET_KEY:-2mHMHkCw10a1MKlTv8jiP60BFNKhbr8Fy1cIWQlqzAIEPDYIF3}
      WAIT_HOSTS: storage-service:3001
    networks:
      - microservice
  order-service:
    container_name: order-service
    build:
      context: ./order-service
    environment: 
      WAIT_HOSTS: auth-service:3002
    networks:
      - microservice
  # MONITORING
  prometheus:
    image: prom/prometheus:v2.16.0
    volumes:
      - ./prometheus/:/etc/prometheus/
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - '9090:9090'
    networks:
      - microservice
  node-exporter:
    image: prom/node-exporter
    ports:
      - '9100:9100'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command: 
      - '--path.procfs=/host/proc' 
      - '--path.sysfs=/host/sys'
      - --collector.filesystem.ignored-mount-points
      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
    networks:
      - microservice
  alertmanager:
    image: prom/alertmanager
    ports:
      - 9093:9093
    volumes:
      - ./alertmanager/:/etc/alertmanager/
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
    networks:
      - microservice
  # cadvisor:
  #   image: google/cadvisor
  #   volumes:
  #     - /:/rootfs:ro
  #     - /var/run:/var/run:rw
  #     - /sys:/sys:ro
  #     - /var/lib/docker/:/var/lib/docker:ro
  #   ports:
  #     - 8080:8080
  #   networks:
  #     - microservice
  #   restart: always
  grafana:
    image: grafana/grafana
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/:/etc/grafana/provisioning/
    env_file:
      - ./grafana/config.monitoring
    depends_on:
        - prometheus
    ports:
        - "3000:3000"
    networks:
      - microservice
  # DEPENDENCIES
  database:
    image: mongo:latest
    # environment: 
    #   MONGO_INITDB_ROOT_USERNAME: admin
    #   MONGO_INITDB_ROOT_PASSWORD: admin
    networks:
      - microservice

volumes:
  prometheus_data: {}
  grafana_data: {}

networks:
  microservice:
    driver: bridge