version: '3.1'

services:
  api-gateway:
    container_name: api-gateway
    image: nginx:latest
    volumes: 
      - ./api-gateway/nginx.conf:/etc/nginx/nginx.conf
      - ./api-gateway/cert:/etc/cert/microservice.com
      - api_gateway_log:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    networks:
      - microservice
    depends_on: 
      - auth-service
      - order-service
  # SERVICES
  storage-service:
    container_name: storage-service
    build:
      context: ./storage-service
      args: 
        TIMEZONE: ${TIMEZONE}
    environment: 
      DB_HOST: database
      DB_PORT: 27017
      DB_NAME: ${DB_NAME:-database}
      DB_MAIN_TABLE: ${DB_MAIN_TABLE:-main}
      WAIT_HOSTS: database:27017
      # DB_ROOT_USERNAME: admin
      # DB_ROOT_PASSWORD: admin
    volumes: 
      - storage_log:/usr/app/log
    networks:
      - microservice
  auth-service:
    container_name: auth-service
    build:
      context: ./auth-service
      args: 
        TIMEZONE: ${TIMEZONE}
    environment: 
      SECRET_KEY: ${SECRET_KEY:-2mHMHkCw10a1MKlTv8jiP60BFNKhbr8Fy1cIWQlqzAIEPDYIF3}
      WAIT_HOSTS: storage-service:3001
    volumes: 
      - auth_log:/usr/app/log
    networks:
      - microservice
  order-service:
    container_name: order-service
    build:
      context: ./order-service
      args: 
        TIMEZONE: ${TIMEZONE}
    environment: 
      WAIT_HOSTS: auth-service:3002
    volumes:
      - order_log:/usr/app/log
    networks:
      - microservice
  # MONITORING
  prometheus:
    image: prom/prometheus:v2.16.0
    volumes:
      - ./monitoring/prometheus/:/etc/prometheus/
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - '9090:9090'
    networks:
      - microservice
  node-exporter:
    image: prom/node-exporter
    ports:
      - '9100:9100'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command: 
      - '--path.procfs=/host/proc' 
      - '--path.sysfs=/host/sys'
      - --collector.filesystem.ignored-mount-points
      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
    networks:
      - microservice
  alertmanager:
    image: prom/alertmanager
    ports:
      - 9093:9093
    volumes:
      - ./monitoring/alertmanager/:/etc/alertmanager/
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
    networks:
      - microservice
  cadvisor:
    image: google/cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    ports:
      - 8080:8080
    networks:
      - microservice
    restart: always
  grafana:
    image: grafana/grafana
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning/:/etc/grafana/provisioning/
    env_file:
      - ./monitoring/grafana/config.monitoring
    depends_on:
        - prometheus
    ports:
        - "3000:3000"
    networks:
      - microservice
  # LOGGING
  elasticsearch:
    build:
      context: ./logging/elasticsearch/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - ./logging/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
      ELASTIC_PASSWORD: admin
    networks:
      - microservice
  logstash:
    build:
      context: ./logging/logstash/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - ./logging/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml
      - ./logging/logstash/pipeline:/usr/share/logstash/pipeline
    ports:
      - "5000:5000"
      - "9600:9600"
    expose: 
      - "5044"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
      PATH_CONFIG: "/usr/share/logstash/pipeline/*.conf"
    networks:
      - microservice
    depends_on:
      - elasticsearch
  filebeat:
    build: ./logging/filebeat
    entrypoint: "filebeat -e -strict.perms=false"
    volumes:
      - ./logging/filebeat/config/filebeat.yml:/usr/share/filebeat/filebeat.yml
      - auth_log:/var/log/microservice_poc/auth-service/log
      - storage_log:/var/log/microservice_poc/storage-service/log
      - order_log:/var/log/microservice_poc/order-service/log
      - api_gateway_log:/var/log/microservice_poc/api-gateway/log
    depends_on: 
      - elasticsearch
    links: 
      - logstash
    networks:
      - microservice
  kibana:
    build:
      context: ./logging/kibana/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - ./logging/kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml
    ports:
      - "5601:5601"
    networks:
      - microservice
    depends_on:
      - elasticsearch
  # DEPENDENCIES
  database:
    image: mongo:latest
    # environment: 
    #   MONGO_INITDB_ROOT_USERNAME: admin
    #   MONGO_INITDB_ROOT_PASSWORD: admin
    networks:
      - microservice
  etcd:
    image: bitnami/etcd
    container_name: etcd
    environment: 
      ALLOW_NONE_AUTHENTICATION: "yes"
      ETCD_ADVERTISE_CLIENT_URLS: "http://etcd:2379"
    networks:
      - microservice

volumes:
  prometheus_data: {}
  grafana_data: {}
  elasticsearch:
  auth_log:
  storage_log:
  order_log:
  api_gateway_log:

networks:
  microservice:
    driver: bridge